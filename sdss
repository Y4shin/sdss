#!/usr/bin/env python3

# Stow Dotfiles Setup Script (SDSS)
# By Patric Plattner <patric@patricplattner.de>
# License: GNU General Public License v3

# This script manages dotfiles setups using GNU stow. It allows to mix and match
# different dotfiles and handles on the fly switching.

# IMPORTS

import argparse
import sys
import os
import socket
import shutil
import errno

# CONSTANTS

# List of all commands.
# Comprised of list of 4-tuples in format of:
# (short-name, long-name, desc, dest, takes_argument)
commands = [
    ("-c", "--clone",
     "Clone dotfiles repo into repo folder",
     "clone_repo", 1),
    ("-a", "--activate-package",
     "Activate single package out of a repo. Provide 2 arguments: " +
     "<repo> <package>.", "a_package", 2),
    ("-A", "--activate-repo",
     "Activate all packages out of a repo.",
     "a_repo", 1),
    ("-d", "--deactivate-package",
     "Deactivate singele package out of a repo. Provide 2 arguments: " +
     "<repo> <package>.", "d_package", 2),
    ("-D", "--deactivate-repo",
     "Deactivate all packages out of a repo.",
     "d_repo", 1),
    ("-l", "--list-packages",
     "Lists all packages in a repo.",
     "l_repo", 1),
    ("-L", "--list-repos",
     "Lists all repos.",
     "l_repos", 0),
    ("-V", "--change-version",
     "Change version of a package.",
     "change_version", 1),
    ("-e", "--toggle-edit-mode",
     "Toggle edit mode.",
     "toggle:edit", 0),
    ("-R", "--refresh",
     "Refreshes package database.",
     "refresh", 0),
    ("-v", "--print-version",
     "Print version of sdss.",
     "version", 0),
    ("-f", "--get-repos-location",
     "Get the folder which contains the repos.",
     "get_repo_folder", 0),
    ("-F", "--get-package-location",
     "Get the working folder of a package. Provice 2 arguments: " +
     "<repo> <package>.", "get_package_folder", 2)
]

# GLOBAL VARS

SDSS_DATA_DIR = os.getenv("SDSS_DATA_DIR") if os.getenv("SDSS_DATA_DIR")\
  is not None else "{}/.local/share/sdss".format(os.getenv("HOME"))
SDSS_DEST_DIR = os.getenv("SDSS_DEST_DIR") if os.getenv("SDSS_DEST_DIR")\
  is not None else os.getenv("HOME")
SDSS_EDIT_DIR = os.getenv("SDSS_EDIT_DIR") if os.getenv("SDSS_EDIT_DIR")\
  is not None else "{}/dotfiles".format(os.getenv("HOME"))
SDSS_VER  = "VERSION"


# HOUSEKEEPING FUNCTIONS

def getargs():
    """

    """
    parser = argparse.ArgumentParser(
      description="Stow Dotfiles Setup Script (SDSS). Please only provide one \
      command at a time.")
    for command in commands:
        if command[0] is not None:
            if command[4] > 0:
                parser.add_argument(command[0], command[1], help=command[2],
                                    dest=command[3], nargs=command[4])
            else:
                parser.add_argument(command[0], command[1], help=command[2],
                                    action="store_true", dest=command[3])
        else:
            if command[4] > 0:
                parser.add_argument(command[1], help=command[2],
                                    dest=command[3], nargs=command[4])
            else:
                parser.add_argument(command[1], help=command[2],
                                    action="store_true", dest=command[3])
    return parser.parse_args()

def get_command(args):
    activated_command = None
    args_dict = vars(args)
    for com in commands:
        command = com[3]
        if args_dict[command] is not None and (args_dict[command] == True or isinstance(args_dict[command], str) or isinstance(args_dict[command], list)):
            if activated_command is None:
                activated_command = (command, args_dict[command])
            else:
                sys.stderr.write("Only provide one command at a time.\n")
                sys.exit(1)
    return activated_command

# REFRESH FUNCTIONS

def get_version():
    current_version = "default"
    if not os.path.isfile(os.path.join(SDSS_DATA_DIR, "sdss.conf")):
        with open(os.path.join(SDSS_DATA_DIR, "sdss.conf"), "w") as conffile:
            conffile.write("version={},edit=inactive\n".format(current_version))
    else:
        with open(os.path.join(SDSS_DATA_DIR, "sdss.conf"), "r") as conffile:
            for line in conffile.readlines():
                if line.split("=")[0] == "version":
                    current_version = line.split("=")[1].replace("\n", "")
    return current_version

def init_repo_files(data_file, deploy_folder, package):
    if not os.path.isfile(data_file):
        with open(data_file, "w") as package_data:
            package_data.write("name={}\nstate=inactive\n".format(
                package.split("/")[-1]))
    try:
        os.mkdir(deploy_folder)
    except FileExistsError:
        pass

def get_known_files(data_file):
    known_files = []
    with open(data_file, "r") as package_data:
        for line in package_data.readlines():
            key = line.split("=")[0]
            data = line.split("=")[1]
            if key == "file" or key == "dir":
                known_files.append(data[:-1])
            elif key[:3] == "alt":
                known_files.append(data[:-1]+".{}.sdss".format(
                  key.split(".")[1]))
    return known_files

def update_data_file(data_folder, data_file, known_files, current_version):
    for root, dirs, files in os.walk(data_folder):
        for entry in dirs+files:
            entry_path = os.path.join(root, entry)
            #do not add duplicate entries
            if entry_path in known_files:
                continue
            #add dir entry to sdss.data
            if os.path.isdir(entry_path):
                with open(data_file, "a+") as package_data:
                    package_data.write("dir={}\n".format(entry_path))
            #handle versioned file.
            elif entry[-5:] == ".sdss":
                with open(data_file, "a+") as package_data:
                    #determine if version is supposed to be active and write to
                    #sdss.data accordingly
                    if entry.split(".")[-2] == current_version:
                        package_data.write("alt.{}.active={}\n".format(
                            current_version,
                            # file.version.sdss -> file
                            os.path.join(root, ".".join(entry.split(".")[:-2])))
                        )
                    else:
                        package_data.write("alt.{}.inactive={}\n".format(
                            entry.split(".")[-2],
                            # file.version.sdss -> file
                            os.path.join(root, ".".join(entry.split(".")[:-2])))
                        )
            #add regular file to sdss.data
            else:
                with open(data_file, "a+") as package_data:
                    package_data.write("file={}\n".format(entry_path))

def handle_file(key, data, data_folder, deploy_folder, new_lines, line):
    if os.path.isdir(data):
        os.remove(data.replace(data_folder, deploy_folder, 1))
        os.mkdir(data.replace(data_folder, deploy_folder, 1))
        new_lines.append("dir="+line.split("=")[1])
    elif not os.path.isfile(data):
        try:
            os.remove(data.replace(data_folder, deploy_folder, 1))
        except FileNotFoundError:
            pass
    else:
        src=data
        dst=data.replace(data_folder, deploy_folder, 1)
        shutil.copy2(src, dst)
        new_lines.append(line)

def handle_dir(key, data, data_folder, deploy_folder, new_lines, line):
    if os.path.isfile(data):
        shutil.rmtree(data.replace(data_folder, deploy_folder, 1))
        shutil.copy2(data, data.replace(data_folder, deploy_folder, 1))
        new_lines.append("file="+line.split("=")[1])
    elif not os.path.isdir(data):
        shutil.rmtree(data.replace(data_folder, deploy_folder, 1))
    else:
        try:
            os.mkdir(data.replace(data_folder, deploy_folder, 1))
        except FileExistsError:
            pass
        new_lines.append(line)

def handle_versioned_file(key, data, data_folder, deploy_folder,
                          current_version, new_lines, line, tmp_files):
    if not os.path.isfile(data+".{}.sdss".format(key.split(".")[1])):
        return True
    #disable versioned file if version does not match anymore
    if key.split(".")[1] != current_version:
        if os.path.isfile(data.replace(data_folder, deploy_folder, 1)):
            os.remove(data.replace(data_folder, deploy_folder, 1))
        new_lines.append(key.split(".")[0] + "." +
                         key.split(".")[1] + ".inactive=" + data)
    #reenable if version matches again
    else:
        #see comment on `tmp_files = []`
        if os.path.isfile(data.replace(data_folder, deploy_folder, 1)):
            shutil.copy2("{}.{}.sdss".format(data, key.split(".")[1]),
                         "{}..tmp".format(data.replace(data_folder,
                                                       deploy_folder, 1)))
            tmp_files.append(data.replace(data_folder, deploy_folder, 1) +
                             "..tmp")
        else:
            src=data + ".{}.sdss".format(key.split(".")[1])
            dst=data.replace(data_folder, deploy_folder, 1)
            shutil.copy2(src, dst)
        new_lines.append(key.split(".")[0] + "." + key.split(".")[1] +
                         ".active" + "=" + data)
    return False

def refresh_deploy_files(package, data_folder, data_file,
                         deploy_folder, current_version):
    #reading lines from sdss.data and filling them into new_lines with needed
    #changes
    new_lines = []
    #if file already exists, then old version is still in place and if
    #it is overwritten now, the new file will be deleted when the
    #overwritten file will be handled, so they will be saved as XXX.tmp
    #and renamed once all files were handled.
    tmp_files = []
    #if already active, then it will be restowed so changes are
    #propagated to SDSS_DEST_DIR
    restow = False
    #ugly hack to prevent python weirdness of not copying anything
    #while in `with open(...) as file` block.
    with open(data_file, "r") as package_data:
        for line in package_data.readlines():
            key = line.split("=")[0]
            data = line.split("=")[1].replace("\n", "")
            #handle versioned file
            if key.split(".")[0] == "alt":
                if handle_versioned_file(key, data, data_folder, deploy_folder,
                                         current_version, new_lines, line,
                                         tmp_files):
                    continue
            #handle directory
            elif key == "dir":
                handle_dir(key, data, data_folder, deploy_folder,
                           new_lines, line)
            #handle file
            elif key == "file":
                handle_file(key, data, data_folder, deploy_folder,
                            new_lines, line)
            #check whether restow is needed
            elif key == "state":
                if data == "active":
                    restow = True
                new_lines.append(line)
    #undo XXX.tmp workaround
    for tmp_file in tmp_files:
        os.rename(tmp_file, tmp_file[:-5])
    #write changes to active file
    with open(data_file, "w") as wfile:
        for line in new_lines:
            wfile.write(line)
            if line[-1] != "\n":
                wfile.write("\n")
    if restow:
        success = os.system("stow -S {} -d {} -t {} >/dev/null 2>&1".format(
          "deploy", package, SDSS_DEST_DIR))

# COMMAND FUNCTIONS

def refresh():
    #getting current dotfile version
    current_version = get_version()
    #getting all repos, appending full pathname and filtering only directories
    repos = [os.path.join(SDSS_DATA_DIR, "repos", name) for name in\
             os.listdir(os.path.join(SDSS_DATA_DIR, "repos")) if\
             os.path.isdir(os.path.join(SDSS_DATA_DIR, "repos", name))]
    for repo in repos:
        #getting packages of repo, filtering for dotfiles and non-folders
        packages = [os.path.join(repo, name) for name in os.listdir(repo) if\
                    os.path.isdir(os.path.join(repo, name)) and name[0] != "."]
        for package in packages:
            data_file     = os.path.join(package, "sdss.data")
            data_folder   = os.path.join(package, "data")
            deploy_folder = os.path.join(package, "deploy")
            #generating initial sdss.data if not existent (aka initializing
            init_repo_files(data_file, deploy_folder, package)
            #walking over all data files and add sdss.data entries.
            known_files = get_known_files(data_file)
            update_data_file(data_folder, data_file,
                             known_files, current_version)
            refresh_deploy_files(package, data_folder, data_file,
                                 deploy_folder, current_version)


def clone(arg):
    os.chdir(os.path.join(SDSS_DATA_DIR, "repos"))
    if os.system("git clone {}".format(arg[0])) == 0:
        print("Successfully cloned repo. Please refresh to initialize the repo\
        for use.")
    else:
        print("Could not clone repo.")

def activate_package(arg):
    package_dir = os.path.join(SDSS_DATA_DIR, "repos", arg[0], arg[1])
    success=False
    with open(os.path.join(package_dir, "sdss.data"), "r") as config_file:
        #check if active
        if [line for line in config_file.readlines() if\
            line.split("=")[0] == "state"][0].split("=")[1][:-1] == "inactive":
            success = os.system("stow -S {} -d {} -t {}".format(
              "deploy", package_dir, SDSS_DEST_DIR)) == 0
    if success:
        text = ""
        with open(os.path.join(package_dir, "sdss.data"), "r") as config_file:
            text = config_file.read().replace("state=inactive", "state=active")
        with open(os.path.join(package_dir, "sdss.data"), "w") as config_file:
            config_file.write(text)
        print("Package {}/{} successfully activated.".format(arg[0], arg[1]))
    else:
        print("Package {}/{} failed to activate.".format(arg[0], arg[1]))

def activate_repo(arg):
    for package in [pkg for pkg in\
                    os.listdir(os.path.join(SDSS_DATA_DIR, "repos", arg[0])) if\
                    os.path.isdir(os.path.join(SDSS_DATA_DIR, "repos", arg[0],
                                               pkg)) and pkg[0] != "."]:
        activate_package([arg[0], package])

def deactivate_package(arg):
    package_dir = os.path.join(SDSS_DATA_DIR, "repos", arg[0], arg[1])
    success=False
    with open(os.path.join(package_dir, "sdss.data"), "r") as config_file:
        #check if active
        if [line for line in config_file.readlines() if\
            line.split("=")[0] == "state"][0].split("=")[1][:-1] == "active":
            success = os.system("stow -D {} -d {} -t {}".format(
                "deploy", package_dir, SDSS_DEST_DIR)) == 0
    if success:
        text = ""
        with open(os.path.join(package_dir, "sdss.data"), "r") as config_file:
            text = config_file.read().replace("state=active", "state=inactive")
        with open(os.path.join(package_dir, "sdss.data"), "w") as config_file:
            config_file.write(text)
        print("Package {}/{} successfully deactivated.".format(arg[0], arg[1]))
    else:
        print("Package {}/{} failed to deactivate.".format(arg[0], arg[1]))

def deactivate_repo(arg):
    for package in [pkg for pkg in\
                    os.listdir(os.path.join(SDSS_DATA_DIR, "repos", arg[0])) if\
                    os.path.isdir(os.path.join(SDSS_DATA_DIR, "repos", arg[0],
                                               pkg)) and pkg[0] != "."]:
        deactivate_package([arg[0], package])

def list_packages(arg):
    for package in [pkg for pkg in\
                    os.listdir(os.path.join(SDSS_DATA_DIR, "repos", arg[0])) if\
                    os.path.isdir(os.path.join(SDSS_DATA_DIR, "repos", arg[0],
                                               pkg)) and pkg[0] != "."]:
        print(package)

def list_repos():
    for repo in [pkg for pkg in\
                 os.listdir(os.path.join(SDSS_DATA_DIR, "repos")) if\
                 os.path.isdir(os.path.join(SDSS_DATA_DIR, "repos", arg[0],
                                            pkg)) and pkg[0] != "."]:
        print(repo)

def version():
    print("sdss {}".format(SDSS_VER))

def change_version(arg):
    print("Change Package Version not yet implemented")

def get_repo_folder():
    sys.stdout.write(os.path.join(SDSS_DATA_DIR, "repos"))

def get_package_folder(arg):
    sys.stdout.write(os.path.join(SDSS_DATA_DIR, "repos", arg[0],
                                  arg[1], "data"))

if __name__ == "__main__":
    args = getargs()
    comm = get_command(args)
    if comm is None:
        sys.stderr.write("Please provide a command.")
        sys.exit(1)
    command, arg = comm
    if command == "refresh":
        refresh()
    elif command == "clone_repo":
        clone(arg)
    elif command == "a_package":
        activate_package(arg)
    elif command == "a_repo":
        activate_repo(arg)
    elif command == "d_package":
        deactivate_package(arg)
    elif command == "d_repo":
        deactivate_repo(arg)
    elif command == "l_repo":
        list_packages(arg)
    elif command == "l_repos":
        list_repos()
    elif command == "version":
        version()
    elif command == "change_version":
        change_version(arg)
    elif command == "toggle_edit":
        toggle_edit()
    elif command == "get_repo_folder":
        get_repo_folder()
    elif command == "get_package_folder":
        get_package_folder(arg)
