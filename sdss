#!/bin/sh

# Stow Dotfiles Setup Script (SDSS)
# By Patric Plattner <patric@patricplattner.de>
# License: GNU General Public License v3

# This script manages dotfiles setups using GNU stow. It allows to mix and match
# different dotfiles and handles on the fly switching.


### CONSTANTS ###

REPO_DIR_0="$SDSS_REPO_DIR"
REPO_DIR_1="${XDG_DATA_HOME:-$HOME/.local/share}/dotfiles"
REPO_DIR_2="$HOME/.dotfiles"

DATA_DIR_0="$SDSS_DATA_DIR"
DATA_DIR_1="${XDG_DATA_HOME:-$HOME/.local/share}/sdss"
DATA_DIR_2="$HOME/.sdss"

STOW_TARGET_DIR_0="$HOME"

REPOS_FILE_NAME="repos"
PACKAGES_DIR_NAME="packages"
### FUNCTIONS ###

warn() {
    echo "WARN:$1" 1>&2
}

error() {
    echo "ERRO:$1" 1>&2
    exit 1
}

multiplecommands(){
    echo "Only provide one command."
    exit 1
}

unknownarg(){
    echo "-$1 is a not know command/flag, or you forgot to provide an argument."
    echo "Please refer to \"$0 -h\" or \"man sdss\""
    exit 1
}

noargs(){
    echo "Please provide an command. Check available commands with \"$0 -h\"."
    exit 1
}

createrepodir(){
    repodir=`dialog --menu "Selecto directory to store dotfile repos" 0 0 0 \
        "$REPO_DIR_0" "" "$REPO_DIR_1" "" "$REPO_DIR_2" "" 3>&1 1>&2 2>&3 3>&1`
    dialog --clear
    mkdir -p $repodir
}

createdatadir(){
    datadir=`dialog --menu "Select directory to store sdss data." 0 0 0 \
        "$DATA_DIR_0" "" "$DATA_DIR_1" "" "$DATA_DIR_2" "" 3>&1 1>&2 2>&3 3>&1`
    dialog --clear
    mkdir -p $datadir
}

directorynotexists(){
    echo "The directory $1 does not exist."
    exit 1
}

listrepos(){
    [ -e "$datadir/$REPOS_FILE_NAME" ] || touch $datadir/$REPOS_FILE_NAME
    sed 's/repo://g' $datadir/$REPOS_FILE_NAME | awk -F, '{ printf "%-19s %s\n", $1, $2 }'
}

listpackages(){
    [ -e "$datadir/$PACKAGES_DIR_NAME" ] || mkdir -p $datadir/$PACKAGES_DIR_NAME
    [ -e "$repodir/$1" ] || error "Repo $1 does not exist"
    [ -e "$datadir/$PACKAGES_DIR_NAME/$1" ] || touch "$datadir/$PACKAGES_DIR_NAME/$1"
    sed 's/pkg://g' $datadir/$PACKAGES_DIR_NAME/$1 | awk -F, '{ printf "%-19s %s\n", $1, $2 }'
}

clonerepo(){
    reponame=`basename $1 .git`
    [ -e "$repodir/$reponame" ] && error "Repo already exists."
    git clone --recursive --depth 1 "$1" "$repodir/$reponame" >/dev/null 2>&1
    echo "$reponame,inactive" >> $datadir/$REPOS_FILE_NAME
    [ -e "$datadir/$PACKAGES_DIR_NAME" ] || mkdir -p $datadir/$PACKAGES_DIR_NAME
    for package in `ls $repodir/$reponame`
    do
        [ -d "$repodir/$reponame/$package"] echo "$package,inactive" >> $datadir/$PACKAGES_DIR_NAME/$reponame
    done
}

refresh() {
    [ -d "$datadir/$PACKAGES_DIR_NAME" ] || mkdir "$datadir/$PACKAGES_DIR_NAME"
    for repo in `ls "$repodir"`
    do
        [ -f "$datadir/$REPOS_FILE_NAME" ] || touch "$datadir/$REPOS_FILE_NAME"
        repomatch="$(grep "repo:$repo," $datadir/$REPOS_FILE_NAME)"
        test "${repomatch#*$repo}" != "$repomatch" || echo "repo:$repo,inactive" >> $datadir/$REPOS_FILE_NAME;
        for package_dir in `find $repodir/$repo -mindepth 1 -maxdepth 1 -type d -not -path '*/\.*/\.*'`
        do
            package=`basename "$package_dir"`
            [ -f "$datadir/$PACKAGES_DIR_NAME/$repo" ] || touch "$datadir/$PACKAGES_DIR_NAME/$repo"
            packagematch="$(grep "pkg:$package," $datadir/$PACKAGES_DIR_NAME/$repo)"
            test "${packagematch#*$package}" != "$packagematch" || echo "pkg:$package,inactive" >> $datadir/$PACKAGES_DIR_NAME/$repo
        done
    done
    echo "KNOWN BUG: packages that are deleted from the repo, will not be deleted here."
}

getactiverepo(){
    return [ -d "$repodir/$1" ] && [[ "$(grep "repo:$1," $datadir/$REPOS_FILE_NAME | sed 's/\(.*\),\(.*\)/\2/g')" == "active" ]]
}

getactive(){
    repo="$(echo $1 | sed 's/\(.*\)\/\(.*\)/\1/g')"
    package="$(echo $1 | sed 's/\(.*\)\/\(.*\)/\2/g')"
    return [ -d "$repodir/$1" ] && [[ "$(grep "pkg:$package," "$datadir/$PACKAGES_DIR_NAME/$repo" | sed 's/\(.*\),\(.*\)/\2/g')" == "active" ]]
}

setactiverepo(){
    [ -d "$repodir/$1" ] && sed "s/repo:$1,inactive/repo:$1,active/g" $datadir/$REPOS_FILE_NAME > $datadir/${REPOS_FILE_NAME}_new && cp $datadir/${REPOS_FILE_NAME}_new $datadir/${REPOS_FILE_NAME} && rm $datadir/${REPOS_FILE_NAME}_new || return 1
}

setactive(){
    repo="$(echo $1 | sed 's/\(.*\)\/\(.*\)/\1/g')"
    package="$(echo $1 | sed 's/\(.*\)\/\(.*\)/\2/g')"
    [ -d "$repodir/$1" ] && sed "s/pkg:$package,inactive/pkg:$package,active/g" $datadir/$PACKAGES_DIR_NAME/$repo > $datadir/$PACKAGES_DIR_NAME/${repo}_new && cp $datadir/$PACKAGES_DIR_NAME/${repo}_new $datadir/$PACKAGES_DIR_NAME/$repo && rm $datadir/$PACKAGES_DIR_NAME/${repo}_new || return 1
}

setinactiverepo(){
    [ -d "$repodir/$1" ] && sed "s/repo:$1,active/repo:$1,inactive/g" $datadir/$REPOS_FILE_NAME > $datadir/${REPOS_FILE_NAME}_new && cp $datadir/${REPOS_FILE_NAME}_new $datadir/${REPOS_FILE_NAME} && rm $datadir/${REPOS_FILE_NAME}_new || return 1
}

setinactive(){
    repo="$(echo $1 | sed 's/\(.*\)\/\(.*\)/\1/g')"
    package="$(echo $1 | sed 's/\(.*\)\/\(.*\)/\2/g')"
    [ -d "$repodir/$1" ] && sed "s/pkg:$package,active/pkg:$package,inactive/g" $datadir/$PACKAGES_DIR_NAME/$repo > $datadir/$PACKAGES_DIR_NAME/${repo}_new && cp $datadir/$PACKAGES_DIR_NAME/${repo}_new $datadir/$PACKAGES_DIR_NAME/$repo && rm $datadir/$PACKAGES_DIR_NAME/${repo}_new || return 1
}

activatepackage(){
    echo "active"
    repo="$(echo $1 | sed 's/\(.*\)\/\(.*\)/\1/g')"
    package="$(echo $1 | sed 's/\(.*\)\/\(.*\)/\2/g')"
    err="$(stow -d "$repodir/$repo" -t "$stowtarget" -R "$package" 2>&1)"
    success=$?
    [ $success -eq 0 ] && setactive "$1" || warn "Could not stow package $1: $err"
    return $success
}

activaterepo(){
    for package_path in `find $repodir/$1 -mindepth 1 -maxdepth 1 -type d -not -path '*/\.*/\.*'`
    do
        package=`basename "$package_path"`
        activatepackage "$1/$package" || failedpackage=1
    done
    [ -z $failedpackage ] && setactiverepo "$1"
}

deactivatepackage(){
    repo="$(echo $1 | sed 's/\(.*\)\/\(.*\)/\1/g')"
    package="$(echo $1 | sed 's/\(.*\)\/\(.*\)/\2/g')"
    err="$(stow -d "$repodir/$repo" -t "$stowtarget" -D "$package" 2>&1)"
    success=$?
    [ $success -eq 0 ] && setinactive "$1" || warn "Could not un-stow package $1: $err"
    return $success
}

deactivaterepo(){
    for package_path in ``find $repodir/$1 -mindepth 1 -maxdepth 1 -type d -not -path '*/\.*/\.*'``
    do
        package=`basename "$package_path"`
        deactivatepackage "$1/$package" || failedpackage=1
    done
    return [ -z $failedpackage ] && setinactiverepo "$1"
}

gethelp(){
    echo ""
    echo "Usage: $0 <command> [command_arg] [optargs]"
    echo ""
    echo "Commands:"
    echo -e "\t-h Show this message."
    echo -e "\t-c <repo>"
    echo -e "\t   Clone dotfiles repo into repo folder."
    echo -e "\t-a <repo>/<package>"
    echo -e "\t   Activate single package out of a repo."
    echo -e "\t-A <repo>"
    echo -e "\t   Activate all packages out of a repo."
    echo -e "\t-d <repo>/<package>"
    echo -e "\t   Deactivate single package out of a repo."
    echo -e "\t-D <repo>"
    echo -e "\t   Deactivate all packages out of a repo."
    echo -e "\t-l <repo>"
    echo -e "\t   List all packages in repo."
    echo -e "\t-R Refresh package lists in repos."
    echo -e "\t-L List all repos."
    echo -e ""
    echo -e "Optinal arguments:"
    echo -e "\t-r <repodir>"
    echo -e "\t   Custom directory for repositories"
    echo -e "\t-s <sdssdatadir>"
    echo -e "\t   Custom directory sdss config data"
    exit 0
}

### GETTING ARGS ###


while getopts ":hr:s:c:a:A:d:D:l:LR" opt
do
    case "$opt" in
        h) gethelp;;
        r) [ -e $OPTARG ] && repodir="$OPTARG" || directorynotexists "$OPTARG";;
        s) [ -e $OPTARG ] && datadir="$OPTARG" || directorynotexists "$OPTARG";;
        c) [ -z "$command" ] && command="clone" && arg="$OPTARG" ||
                   multiplecommands;; # clones new dotfiles repo
        a) [ -z "$command" ] && command="activatepackage" && arg="$OPTARG" ||
                   multiplecommands;; # activate single package
        A) [ -z "$command" ] && command="activaterepo" && arg="$OPTARG" ||
                   multiplecommands;; # activate all packages in repo
        d) [ -z "$command" ] && command="deactivatepackage" && arg="$OPTARG" ||
                   multiplecommands;; # deactivate all packages in repo
        D) [ -z "$command" ] && command="deactivaterepo" && arg="$OPTARG" ||
                   multiplecommands;; # deactivate single package
        l) [ -z "$command" ] && command="listpackages" && arg="$OPTARG" ||
                   multiplecommands;; # lists all packages in repo
        L) [ -z "$command" ] && command="listrepos" ||
                   multiplecommands;; # lists all repos
        R) [ -z "$command" ] && command="refresh" ||
                   multiplecommands;; # lists all repos
        *) unknownarg $OPTARG;; #shows error message and exists with 1
    esac
done

[ -z "$command" ] && noargs # shows error message and exits with 1
# set repodir and datadir according to priority and create one if necessary
[ -z "$repodir" ] && [ -e "$REPO_DIR_0" ] && repodir="$REPO_DIR_0"
[ -z "$repodir" ] && [ -e "$REPO_DIR_1" ] && repodir="$REPO_DIR_1"
[ -z "$repodir" ] && [ -e "$REPO_DIR_2" ] && repodir="$REPO_DIR_2"
[ -z "$repodir" ] && createrepodir
[ -z "$datadir" ] && [ -e "$DATA_DIR_0" ] && datadir="$DATA_DIR_0"
[ -z "$datadir" ] && [ -e "$DATA_DIR_1" ] && datadir="$DATA_DIR_1"
[ -z "$datadir" ] && [ -e "$DATA_DIR_2" ] && datadir="$DATA_DIR_2"
[ -z "$datadir" ] && createdatadir
stowtarget=$STOW_TARGET_DIR_0

case "$command" in
    "clone") clonerepo "$arg";;
    "activatepackage") activatepackage "$arg";;
    "activaterepo") activaterepo "$arg";;
    "deactivatepackage") deactivatepackage "$arg";;
    "deactivaterepo") deactivaterepo "$arg";;
    "refresh") refresh;;
    "listrepos") listrepos;;
    "listpackages") listpackages "$arg";;
    *) error "INTERNAL: Function for command not yet implemented.";;
esac

